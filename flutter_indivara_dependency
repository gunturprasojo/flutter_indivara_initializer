#!/usr/bin/env ruby

print "Enter Dependency Name: "
dependencyName = gets.chomp

#SERVICE
dependencyClassInitializer = 
%W[
'''
abstract class #{dependencyName.capitalize}DependencySource { \n } \n \n
abstract class #{dependencyName.capitalize}DependencyInterface { \n } \n \n
class #{dependencyName.capitalize}Dependency implements 
#{dependencyName.capitalize}DependencySource , #{dependencyName.capitalize}DependencyInterface { \n
}
'''
].join(' ')
#END PRESENTATION


#UNIT TEST
getTestMode = '''Get.testMode = true;'''

unitTestInitializer = '''test("sut = system under test ", () async { });'''

dependencyTestClassInitializer = 
%W[
'''
import "../../../../lib/base/dependencies/#{dependencyName.downcase}/#{dependencyName.downcase}_dependency.dart"; \n
import "package:flutter_test/flutter_test.dart"; \n
import "package:get/get.dart"; \n \n
void main(){ \n
#{getTestMode} \n
var sut = #{dependencyName.capitalize}Dependency();\n
#{unitTestInitializer} \n
}
'''
].join(' ')

#END UNIT TEST


if dependencyName.length > 1

    back = "\ && cd .. "
    #Service
	createDependency = 
            "cd lib" + 
            "\ && cd base" +
            "\ && cd dependencies" +
            "\ && mkdir " + dependencyName.downcase + 
            "\ && cd " + dependencyName.downcase +
            "\ && touch " + dependencyName.downcase + "_dependency.dart" +
            "\ && tee " + dependencyName.downcase + "_dependency.dart <<< " + dependencyClassInitializer
    # End Service

     # Unit Test
	createDependencyTest = 
    "\ && cd test" + 
    "\ && cd base" + 
    "\ && cd dependencies" +
    "\ && mkdir " + dependencyName.downcase + 
    "\ && cd " + dependencyName.downcase +
    "\ && touch " + dependencyName.downcase + "_dependency_test.dart" +
    "\ && tee " + dependencyName.downcase + "_dependency_test.dart <<< " + dependencyTestClassInitializer
    # End Unit Test

	exec(
    createDependency +
    back + 
    back +
    back +
    back +
    createDependencyTest
	)
else
	puts "Please enter Dependency Name!"
end
