#!/usr/bin/env ruby

#INPUT
#Presentation Name
puts '--------------------------------------------------'
print "Enter Presentation Name: "
presentationName = gets.chomp
presentationFileName = presentationName.downcase
presentationClassName = presentationName.split('_').map(&:capitalize).join
puts 'File Name Pattern  :' + presentationFileName
puts 'Class Name Pattern :' + presentationClassName
puts '--------------------------------------------------'
#Controller Interface
puts '''
Example Input : doLogin,forgotPassword.

Generator will generate as : 
Future<void> doLogin();
Future<void> forgotPassword();
In Controller Interface.

You need to change specific return if needed later.

Please input without parameter.
If no interface yet please fill Blank.
Enter Function In Controller Presentation (separated with comma) : 
'''
interfaceName = gets.chomp
interfaceFunctionNames = interfaceName.split(',').map(&:strip)
puts interfaceFunctionNames.inspect
interfaceFunctionsInitializer = interfaceFunctionNames.map { |infName| + 
'''
Future<void> ''' + infName + '''();'''} 
implementationFunctionsInitializer = interfaceFunctionNames.map { |infName| + 
'''
    @override
    Future<void> ''' + infName + '''() async {
        //TODO: Implement This Function
    }
'''
} 
puts interfaceFunctionsInitializer.inspect
puts '--------------------------------------------------'
#END OF INPUT

def downcase_first_letter(str)
    str[0].downcase + str[1..]
end

presentationVariableName = downcase_first_letter(presentationClassName)

#PRESENTATION
constantClassInitializer = 
%W[
'''
import "package:get/get.dart"; \n
class #{presentationClassName}Constant { \n

}
'''
].join(' ')

controllerBindingInitializer = 
%W[
'''
import "../service/#{presentationFileName}_service.dart"; \n
import "#{presentationFileName}_controller.dart"; \n
import "package:get/get.dart"; \n \n
class #{presentationClassName}Binding extends Bindings { \n
@override \n
void dependencies() { \n
 #{presentationClassName}Service #{presentationVariableName}Service = #{presentationClassName}Service(); \n

  #{presentationClassName}ControllerInterface controller = #{presentationClassName}Controller(
      #{presentationVariableName}Service: #{presentationVariableName}Service,
    ) as #{presentationClassName}ControllerInterface; \n
    \n
    Get.put(controller);
}\n
}
'''
].join(' ')

controllerClassInitializer = 
%W[
'''
import "../service/#{presentationFileName}_service.dart"; \n
import "../model/#{presentationFileName}_viewmodel.dart"; \n
import "package:get/get.dart"; \n \n
abstract class #{presentationClassName}ControllerRepository { \n 
    late final #{presentationClassName}ServiceInterface #{presentationVariableName}Service; \n
} \n \n
abstract class #{presentationClassName}ControllerInterface { \n 
    late #{presentationClassName}ViewModel viewModel; \n
    #{interfaceFunctionsInitializer.join(' ')} \n
} \n \n
class #{presentationClassName}Controller extends GetxController implements 
#{presentationClassName}ControllerRepository , #{presentationClassName}ControllerInterface { \n
\n
\t      @override \n
\t  var viewModel = #{presentationClassName}ViewModel(); \n
\n
\t    @override \n
\t  late final #{presentationClassName}ServiceInterface #{presentationVariableName}Service; \n
\n
\t #{presentationClassName}Controller({ \n
\t\t    required this.#{presentationVariableName}Service, \n
\t  }); \n

\t #{implementationFunctionsInitializer.join(' ')} \n
}
'''
].join(' ')

viewClassInitializer = 
%W[
'''
//coverage:ignore-file \n
import "package:flutter/material.dart"; \n
import "package:get/get.dart"; \n 
import "../controller/#{presentationFileName}_controller.dart"; \n \n
class #{presentationClassName}Page extends GetView<#{presentationClassName}ControllerInterface> { \n
\n
static const String routeName = "/#{presentationVariableName}-page"; \n
\n
const #{presentationClassName}Page({ \n
super.key, \n
}); \n
\n
@override \n
Widget build(BuildContext context) {\n
return Container();
}\n
}
'''
].join(' ')

modelClassInitializer =
%W[
'''
import "package:get/get.dart"; \n \n
class #{presentationClassName}ViewModel { \n
    Rx<String> title = "''".obs; \n
}
'''
].join(' ')

serviceClassInitializer = 
%W[
'''
import "package:get/get.dart"; \n \n
abstract class #{presentationClassName}ServiceRepository { \n } \n \n
abstract class #{presentationClassName}ServiceInterface { \n } \n \n
class #{presentationClassName}Service implements 
#{presentationClassName}ServiceRepository , #{presentationClassName}ServiceInterface { \n
}
'''
].join(' ')
#END PRESENTATION

#UNIT TEST
getTestMode = '''Get.testMode = true;'''

unitTestInitializer = '''test("sut = system under test ", () async { });'''

functionUnitTestInitializer = interfaceFunctionNames.map { |infName| + '''
test("testing ''' + infName + '''()", () async { 
    sut.''' + infName +'''();
});
'''} 
puts functionUnitTestInitializer

constantTestClassInitializer = 
%W[
'''
import "../../../../lib/presentation/#{presentationFileName}/constants/#{presentationFileName}_constant.dart"; \n
import "package:flutter_test/flutter_test.dart"; \n
import "package:get/get.dart"; \n \n
void main(){ \n
#{getTestMode} \n
var sut = #{presentationClassName}Constant();\n
#{unitTestInitializer} \n
}
'''
].join(' ')

controllerTestBindingInitializer =  
%W[
'''
import "../../../../lib/presentation/#{presentationFileName}/controller/#{presentationFileName}_binding.dart"; \n
import "package:flutter_test/flutter_test.dart"; \n
import "package:get/get.dart"; \n \n
void main(){ \n
#{getTestMode} \n
var sut = #{presentationClassName}Binding();\n
#{unitTestInitializer} \n
}
'''
].join(' ')


controllerTestClassInitializer = 
%W[
'''
import "../../../../lib/presentation/#{presentationFileName}/controller/#{presentationFileName}_controller.dart"; \n
import "../../../../lib/presentation/#{presentationFileName}/service/#{presentationFileName}_service.dart"; \n
import "package:flutter_test/flutter_test.dart"; \n
import "package:get/get.dart"; \n \n

class Mock#{presentationClassName}Service implements #{presentationClassName}ServiceInterface { \n
} \n \n

void main(){ \n
#{getTestMode} \n
var sut = #{presentationClassName}Controller(#{presentationVariableName}Service :  Mock#{presentationClassName}Service() );\n
#{unitTestInitializer} \n
#{functionUnitTestInitializer.join()} \n
}
'''
].join(' ')


serviceTestClassInitializer = 
%W[
'''
import "../../../../lib/presentation/#{presentationFileName}/service/#{presentationFileName}_service.dart"; \n
import "package:flutter_test/flutter_test.dart"; \n
import "package:get/get.dart"; \n \n
void main(){ \n
#{getTestMode} \n
var sut = #{presentationClassName}Service();\n
#{unitTestInitializer} \n
}
'''
].join(' ')

#END UNIT TEST

if presentationClassName.length > 1

    #Presentation
	createPresentation = 
            "cd lib" + 
            "\ && cd presentation" +
            "\ && mkdir " + presentationFileName + 
            "\ && cd " + presentationFileName

    createConstant = 
            "\ && mkdir constants" +
            "\ && cd constants" +
            "\ && touch " + presentationFileName + "_constant.dart" +
            "\ && tee " + presentationFileName + "_constant.dart <<< " + constantClassInitializer

    createController = 
            "\ && mkdir controller" +
            " && cd controller" +
            "\ && touch " + presentationFileName + "_binding.dart" +
            "\ && tee " + presentationFileName + "_binding.dart <<< " + controllerBindingInitializer +
            " && touch " + presentationFileName + "_controller.dart" +
            " && tee " + presentationFileName + "_controller.dart <<< " + controllerClassInitializer
    
    createView =
            "\ && mkdir view" +
            "\ && cd view" +
            "\ && touch " + presentationFileName + "_page.dart" +
            "\ && tee " + presentationFileName + "_page.dart <<< " + viewClassInitializer

    createViewModel = 
            "\ && mkdir model" +
            "\ && cd model" +
            "\ && touch " + presentationFileName + "_viewmodel.dart" +
            "\ && tee " + presentationFileName + "_viewmodel.dart <<< " + modelClassInitializer

    createService = 
            "\ && mkdir service" +
            "\ && cd service" +
            "\ && touch " + presentationFileName + "_service.dart" +
            "\ && tee " + presentationFileName + "_service.dart <<< " + serviceClassInitializer
    # EndPresentation

    back = "\ && cd .. "
    
	createPresentationTest = 
            "\ && cd test" + 
            "\ && cd presentation" +
            "\ && mkdir " + presentationFileName + 
            "\ && cd " + presentationFileName
    createConstantTest = 
        "\ && mkdir constants" +
        "\ && cd constants" +
        "\ && touch " + presentationFileName + "_constant_test.dart" +
        "\ && tee " + presentationFileName + "_constant_test.dart <<< " + constantTestClassInitializer

    createControllerTest = 
        "\ && mkdir controller" +
        "\ && cd controller" +
        "\ && touch " + presentationFileName + "_binding_test.dart" +
        "\ && tee " + presentationFileName + "_binding_test.dart <<< " + controllerTestBindingInitializer +
        "\ && touch " + presentationFileName + "_controller_test.dart" +
        "\ && tee " + presentationFileName + "_controller_test.dart <<< " + controllerTestClassInitializer
    
    createServiceTest = 
        "\ && mkdir service" +
        "\ && cd service" +
        "\ && touch " + presentationFileName + "_service_test.dart" +
        "\ && tee " + presentationFileName + "_service_test.dart <<< " + serviceTestClassInitializer


	exec(
	createPresentation + 
    createConstant +
    back +
    createController +
    back +
    createView +
    back +
    createViewModel +
    back +
    createService +
    back +
    back +
    back +
    back +
    createPresentationTest +
    createConstantTest +
    back +
    createControllerTest +
    back +
    createServiceTest
	)
else
	puts "Please enter Presentation Name name!"
end
